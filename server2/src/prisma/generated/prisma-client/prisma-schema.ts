// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateSurvey {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createSurvey(data: SurveyCreateInput!): Survey!
  updateSurvey(data: SurveyUpdateInput!, where: SurveyWhereUniqueInput!): Survey
  updateManySurveys(data: SurveyUpdateManyMutationInput!, where: SurveyWhereInput): BatchPayload!
  upsertSurvey(where: SurveyWhereUniqueInput!, create: SurveyCreateInput!, update: SurveyUpdateInput!): Survey!
  deleteSurvey(where: SurveyWhereUniqueInput!): Survey
  deleteManySurveys(where: SurveyWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  survey(where: SurveyWhereUniqueInput!): Survey
  surveys(where: SurveyWhereInput, orderBy: SurveyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Survey]!
  surveysConnection(where: SurveyWhereInput, orderBy: SurveyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SurveyConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  survey(where: SurveySubscriptionWhereInput): SurveySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Survey {
  _id: ID!
  body: String
  dateSent: DateTime
  lastResponded: DateTime
  no: Int
  recipients: [SurveyRecipient!]
  subject: String
  title: String
  user: User
  v: Int
  yes: Int
}

type SurveyConnection {
  pageInfo: PageInfo!
  edges: [SurveyEdge]!
  aggregate: AggregateSurvey!
}

input SurveyCreateInput {
  _id: ID
  body: String
  dateSent: DateTime
  lastResponded: DateTime
  no: Int
  recipients: SurveyRecipientCreateManyInput
  subject: String
  title: String
  user: UserCreateOneInput
  v: Int
  yes: Int
}

type SurveyEdge {
  node: Survey!
  cursor: String!
}

enum SurveyOrderByInput {
  _id_ASC
  _id_DESC
  body_ASC
  body_DESC
  dateSent_ASC
  dateSent_DESC
  lastResponded_ASC
  lastResponded_DESC
  no_ASC
  no_DESC
  subject_ASC
  subject_DESC
  title_ASC
  title_DESC
  v_ASC
  v_DESC
  yes_ASC
  yes_DESC
}

type SurveyPreviousValues {
  _id: ID!
  body: String
  dateSent: DateTime
  lastResponded: DateTime
  no: Int
  subject: String
  title: String
  v: Int
  yes: Int
}

type SurveyRecipient {
  _id: ID!
  email: String
  responded: Boolean
}

input SurveyRecipientCreateInput {
  _id: ID
  email: String
  responded: Boolean
}

input SurveyRecipientCreateManyInput {
  create: [SurveyRecipientCreateInput!]
}

input SurveyRecipientRestrictedWhereInput {
  _id: ID
  _id_not: ID
  _id_in: [ID!]
  _id_not_in: [ID!]
  _id_lt: ID
  _id_lte: ID
  _id_gt: ID
  _id_gte: ID
  _id_contains: ID
  _id_not_contains: ID
  _id_starts_with: ID
  _id_not_starts_with: ID
  _id_ends_with: ID
  _id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  responded: Boolean
  responded_not: Boolean
  AND: [SurveyRecipientRestrictedWhereInput!]
}

input SurveyRecipientScalarWhereInput {
  _id: ID
  _id_not: ID
  _id_in: [ID!]
  _id_not_in: [ID!]
  _id_lt: ID
  _id_lte: ID
  _id_gt: ID
  _id_gte: ID
  _id_contains: ID
  _id_not_contains: ID
  _id_starts_with: ID
  _id_not_starts_with: ID
  _id_ends_with: ID
  _id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  responded: Boolean
  responded_not: Boolean
  AND: [SurveyRecipientScalarWhereInput!]
  OR: [SurveyRecipientScalarWhereInput!]
  NOT: [SurveyRecipientScalarWhereInput!]
}

input SurveyRecipientUpdateDataInput {
  email: String
  responded: Boolean
}

input SurveyRecipientUpdateManyDataInput {
  email: String
  responded: Boolean
}

input SurveyRecipientUpdateManyInput {
  create: [SurveyRecipientCreateInput!]
  update: [SurveyRecipientUpdateWithWhereUniqueNestedInput!]
  upsert: [SurveyRecipientUpsertWithWhereUniqueNestedInput!]
  delete: [SurveyRecipientWhereUniqueInput!]
  deleteMany: [SurveyRecipientScalarWhereInput!]
  updateMany: [SurveyRecipientUpdateManyWithWhereNestedInput!]
}

input SurveyRecipientUpdateManyWithWhereNestedInput {
  where: SurveyRecipientScalarWhereInput!
  data: SurveyRecipientUpdateManyDataInput!
}

input SurveyRecipientUpdateWithWhereUniqueNestedInput {
  where: SurveyRecipientWhereUniqueInput!
  data: SurveyRecipientUpdateDataInput!
}

input SurveyRecipientUpsertWithWhereUniqueNestedInput {
  where: SurveyRecipientWhereUniqueInput!
  update: SurveyRecipientUpdateDataInput!
  create: SurveyRecipientCreateInput!
}

input SurveyRecipientWhereInput {
  _id: ID
  _id_not: ID
  _id_in: [ID!]
  _id_not_in: [ID!]
  _id_lt: ID
  _id_lte: ID
  _id_gt: ID
  _id_gte: ID
  _id_contains: ID
  _id_not_contains: ID
  _id_starts_with: ID
  _id_not_starts_with: ID
  _id_ends_with: ID
  _id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  responded: Boolean
  responded_not: Boolean
  AND: [SurveyRecipientWhereInput!]
}

input SurveyRecipientWhereUniqueInput {
  _id: ID
}

type SurveySubscriptionPayload {
  mutation: MutationType!
  node: Survey
  updatedFields: [String!]
  previousValues: SurveyPreviousValues
}

input SurveySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SurveyWhereInput
  AND: [SurveySubscriptionWhereInput!]
}

input SurveyUpdateInput {
  body: String
  dateSent: DateTime
  lastResponded: DateTime
  no: Int
  recipients: SurveyRecipientUpdateManyInput
  subject: String
  title: String
  user: UserUpdateOneInput
  v: Int
  yes: Int
}

input SurveyUpdateManyMutationInput {
  body: String
  dateSent: DateTime
  lastResponded: DateTime
  no: Int
  subject: String
  title: String
  v: Int
  yes: Int
}

input SurveyWhereInput {
  _id: ID
  _id_not: ID
  _id_in: [ID!]
  _id_not_in: [ID!]
  _id_lt: ID
  _id_lte: ID
  _id_gt: ID
  _id_gte: ID
  _id_contains: ID
  _id_not_contains: ID
  _id_starts_with: ID
  _id_not_starts_with: ID
  _id_ends_with: ID
  _id_not_ends_with: ID
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  dateSent: DateTime
  dateSent_not: DateTime
  dateSent_in: [DateTime!]
  dateSent_not_in: [DateTime!]
  dateSent_lt: DateTime
  dateSent_lte: DateTime
  dateSent_gt: DateTime
  dateSent_gte: DateTime
  lastResponded: DateTime
  lastResponded_not: DateTime
  lastResponded_in: [DateTime!]
  lastResponded_not_in: [DateTime!]
  lastResponded_lt: DateTime
  lastResponded_lte: DateTime
  lastResponded_gt: DateTime
  lastResponded_gte: DateTime
  no: Int
  no_not: Int
  no_in: [Int!]
  no_not_in: [Int!]
  no_lt: Int
  no_lte: Int
  no_gt: Int
  no_gte: Int
  recipients_some: SurveyRecipientWhereInput
  recipients_every: SurveyRecipientRestrictedWhereInput
  recipients_none: SurveyRecipientRestrictedWhereInput
  subject: String
  subject_not: String
  subject_in: [String!]
  subject_not_in: [String!]
  subject_lt: String
  subject_lte: String
  subject_gt: String
  subject_gte: String
  subject_contains: String
  subject_not_contains: String
  subject_starts_with: String
  subject_not_starts_with: String
  subject_ends_with: String
  subject_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  user: UserWhereInput
  v: Int
  v_not: Int
  v_in: [Int!]
  v_not_in: [Int!]
  v_lt: Int
  v_lte: Int
  v_gt: Int
  v_gte: Int
  yes: Int
  yes_not: Int
  yes_in: [Int!]
  yes_not_in: [Int!]
  yes_lt: Int
  yes_lte: Int
  yes_gt: Int
  yes_gte: Int
  AND: [SurveyWhereInput!]
}

input SurveyWhereUniqueInput {
  _id: ID
}

type User {
  _id: ID!
  credits: Int
  googleID: String
  v: Int
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  _id: ID
  credits: Int
  googleID: String
  v: Int
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  _id_ASC
  _id_DESC
  credits_ASC
  credits_DESC
  googleID_ASC
  googleID_DESC
  v_ASC
  v_DESC
}

type UserPreviousValues {
  _id: ID!
  credits: Int
  googleID: String
  v: Int
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  credits: Int
  googleID: String
  v: Int
}

input UserUpdateInput {
  credits: Int
  googleID: String
  v: Int
}

input UserUpdateManyMutationInput {
  credits: Int
  googleID: String
  v: Int
}

input UserUpdateOneInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  _id: ID
  _id_not: ID
  _id_in: [ID!]
  _id_not_in: [ID!]
  _id_lt: ID
  _id_lte: ID
  _id_gt: ID
  _id_gte: ID
  _id_contains: ID
  _id_not_contains: ID
  _id_starts_with: ID
  _id_not_starts_with: ID
  _id_ends_with: ID
  _id_not_ends_with: ID
  credits: Int
  credits_not: Int
  credits_in: [Int!]
  credits_not_in: [Int!]
  credits_lt: Int
  credits_lte: Int
  credits_gt: Int
  credits_gte: Int
  googleID: String
  googleID_not: String
  googleID_in: [String!]
  googleID_not_in: [String!]
  googleID_lt: String
  googleID_lte: String
  googleID_gt: String
  googleID_gte: String
  googleID_contains: String
  googleID_not_contains: String
  googleID_starts_with: String
  googleID_not_starts_with: String
  googleID_ends_with: String
  googleID_not_ends_with: String
  v: Int
  v_not: Int
  v_in: [Int!]
  v_not_in: [Int!]
  v_lt: Int
  v_lte: Int
  v_gt: Int
  v_gte: Int
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  _id: ID
}
`