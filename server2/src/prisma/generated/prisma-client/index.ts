// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  survey: (where?: SurveyWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  survey: (where: SurveyWhereUniqueInput) => SurveyNullablePromise;
  surveys: (args?: {
    where?: SurveyWhereInput;
    orderBy?: SurveyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Survey>;
  surveysConnection: (args?: {
    where?: SurveyWhereInput;
    orderBy?: SurveyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SurveyConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createSurvey: (data: SurveyCreateInput) => SurveyPromise;
  updateSurvey: (args: {
    data: SurveyUpdateInput;
    where: SurveyWhereUniqueInput;
  }) => SurveyPromise;
  updateManySurveys: (args: {
    data: SurveyUpdateManyMutationInput;
    where?: SurveyWhereInput;
  }) => BatchPayloadPromise;
  upsertSurvey: (args: {
    where: SurveyWhereUniqueInput;
    create: SurveyCreateInput;
    update: SurveyUpdateInput;
  }) => SurveyPromise;
  deleteSurvey: (where: SurveyWhereUniqueInput) => SurveyPromise;
  deleteManySurveys: (where?: SurveyWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  survey: (
    where?: SurveySubscriptionWhereInput
  ) => SurveySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SurveyOrderByInput =
  | "_id_ASC"
  | "_id_DESC"
  | "body_ASC"
  | "body_DESC"
  | "dateSent_ASC"
  | "dateSent_DESC"
  | "lastResponded_ASC"
  | "lastResponded_DESC"
  | "no_ASC"
  | "no_DESC"
  | "subject_ASC"
  | "subject_DESC"
  | "title_ASC"
  | "title_DESC"
  | "v_ASC"
  | "v_DESC"
  | "yes_ASC"
  | "yes_DESC";

export type UserOrderByInput =
  | "_id_ASC"
  | "_id_DESC"
  | "credits_ASC"
  | "credits_DESC"
  | "googleID_ASC"
  | "googleID_DESC"
  | "v_ASC"
  | "v_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface SurveyRecipientCreateInput {
  _id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  responded?: Maybe<Boolean>;
}

export type SurveyWhereUniqueInput = AtLeastOne<{
  _id: Maybe<ID_Input>;
}>;

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type SurveyRecipientWhereUniqueInput = AtLeastOne<{
  _id: Maybe<ID_Input>;
}>;

export interface SurveyRecipientUpdateManyDataInput {
  email?: Maybe<String>;
  responded?: Maybe<Boolean>;
}

export interface SurveyUpdateInput {
  body?: Maybe<String>;
  dateSent?: Maybe<DateTimeInput>;
  lastResponded?: Maybe<DateTimeInput>;
  no?: Maybe<Int>;
  recipients?: Maybe<SurveyRecipientUpdateManyInput>;
  subject?: Maybe<String>;
  title?: Maybe<String>;
  user?: Maybe<UserUpdateOneInput>;
  v?: Maybe<Int>;
  yes?: Maybe<Int>;
}

export interface SurveyRecipientUpdateManyWithWhereNestedInput {
  where: SurveyRecipientScalarWhereInput;
  data: SurveyRecipientUpdateManyDataInput;
}

export interface SurveySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SurveyWhereInput>;
  AND?: Maybe<SurveySubscriptionWhereInput[] | SurveySubscriptionWhereInput>;
}

export interface SurveyRecipientScalarWhereInput {
  _id?: Maybe<ID_Input>;
  _id_not?: Maybe<ID_Input>;
  _id_in?: Maybe<ID_Input[] | ID_Input>;
  _id_not_in?: Maybe<ID_Input[] | ID_Input>;
  _id_lt?: Maybe<ID_Input>;
  _id_lte?: Maybe<ID_Input>;
  _id_gt?: Maybe<ID_Input>;
  _id_gte?: Maybe<ID_Input>;
  _id_contains?: Maybe<ID_Input>;
  _id_not_contains?: Maybe<ID_Input>;
  _id_starts_with?: Maybe<ID_Input>;
  _id_not_starts_with?: Maybe<ID_Input>;
  _id_ends_with?: Maybe<ID_Input>;
  _id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  responded?: Maybe<Boolean>;
  responded_not?: Maybe<Boolean>;
  AND?: Maybe<
    SurveyRecipientScalarWhereInput[] | SurveyRecipientScalarWhereInput
  >;
  OR?: Maybe<
    SurveyRecipientScalarWhereInput[] | SurveyRecipientScalarWhereInput
  >;
  NOT?: Maybe<
    SurveyRecipientScalarWhereInput[] | SurveyRecipientScalarWhereInput
  >;
}

export interface SurveyRecipientWhereInput {
  _id?: Maybe<ID_Input>;
  _id_not?: Maybe<ID_Input>;
  _id_in?: Maybe<ID_Input[] | ID_Input>;
  _id_not_in?: Maybe<ID_Input[] | ID_Input>;
  _id_lt?: Maybe<ID_Input>;
  _id_lte?: Maybe<ID_Input>;
  _id_gt?: Maybe<ID_Input>;
  _id_gte?: Maybe<ID_Input>;
  _id_contains?: Maybe<ID_Input>;
  _id_not_contains?: Maybe<ID_Input>;
  _id_starts_with?: Maybe<ID_Input>;
  _id_not_starts_with?: Maybe<ID_Input>;
  _id_ends_with?: Maybe<ID_Input>;
  _id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  responded?: Maybe<Boolean>;
  responded_not?: Maybe<Boolean>;
  AND?: Maybe<SurveyRecipientWhereInput[] | SurveyRecipientWhereInput>;
}

export interface UserWhereInput {
  _id?: Maybe<ID_Input>;
  _id_not?: Maybe<ID_Input>;
  _id_in?: Maybe<ID_Input[] | ID_Input>;
  _id_not_in?: Maybe<ID_Input[] | ID_Input>;
  _id_lt?: Maybe<ID_Input>;
  _id_lte?: Maybe<ID_Input>;
  _id_gt?: Maybe<ID_Input>;
  _id_gte?: Maybe<ID_Input>;
  _id_contains?: Maybe<ID_Input>;
  _id_not_contains?: Maybe<ID_Input>;
  _id_starts_with?: Maybe<ID_Input>;
  _id_not_starts_with?: Maybe<ID_Input>;
  _id_ends_with?: Maybe<ID_Input>;
  _id_not_ends_with?: Maybe<ID_Input>;
  credits?: Maybe<Int>;
  credits_not?: Maybe<Int>;
  credits_in?: Maybe<Int[] | Int>;
  credits_not_in?: Maybe<Int[] | Int>;
  credits_lt?: Maybe<Int>;
  credits_lte?: Maybe<Int>;
  credits_gt?: Maybe<Int>;
  credits_gte?: Maybe<Int>;
  googleID?: Maybe<String>;
  googleID_not?: Maybe<String>;
  googleID_in?: Maybe<String[] | String>;
  googleID_not_in?: Maybe<String[] | String>;
  googleID_lt?: Maybe<String>;
  googleID_lte?: Maybe<String>;
  googleID_gt?: Maybe<String>;
  googleID_gte?: Maybe<String>;
  googleID_contains?: Maybe<String>;
  googleID_not_contains?: Maybe<String>;
  googleID_starts_with?: Maybe<String>;
  googleID_not_starts_with?: Maybe<String>;
  googleID_ends_with?: Maybe<String>;
  googleID_not_ends_with?: Maybe<String>;
  v?: Maybe<Int>;
  v_not?: Maybe<Int>;
  v_in?: Maybe<Int[] | Int>;
  v_not_in?: Maybe<Int[] | Int>;
  v_lt?: Maybe<Int>;
  v_lte?: Maybe<Int>;
  v_gt?: Maybe<Int>;
  v_gte?: Maybe<Int>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserUpdateInput {
  credits?: Maybe<Int>;
  googleID?: Maybe<String>;
  v?: Maybe<Int>;
}

export interface SurveyCreateInput {
  _id?: Maybe<ID_Input>;
  body?: Maybe<String>;
  dateSent?: Maybe<DateTimeInput>;
  lastResponded?: Maybe<DateTimeInput>;
  no?: Maybe<Int>;
  recipients?: Maybe<SurveyRecipientCreateManyInput>;
  subject?: Maybe<String>;
  title?: Maybe<String>;
  user?: Maybe<UserCreateOneInput>;
  v?: Maybe<Int>;
  yes?: Maybe<Int>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface SurveyRecipientCreateManyInput {
  create?: Maybe<SurveyRecipientCreateInput[] | SurveyRecipientCreateInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  _id: Maybe<ID_Input>;
}>;

export interface SurveyRecipientUpsertWithWhereUniqueNestedInput {
  where: SurveyRecipientWhereUniqueInput;
  update: SurveyRecipientUpdateDataInput;
  create: SurveyRecipientCreateInput;
}

export interface SurveyWhereInput {
  _id?: Maybe<ID_Input>;
  _id_not?: Maybe<ID_Input>;
  _id_in?: Maybe<ID_Input[] | ID_Input>;
  _id_not_in?: Maybe<ID_Input[] | ID_Input>;
  _id_lt?: Maybe<ID_Input>;
  _id_lte?: Maybe<ID_Input>;
  _id_gt?: Maybe<ID_Input>;
  _id_gte?: Maybe<ID_Input>;
  _id_contains?: Maybe<ID_Input>;
  _id_not_contains?: Maybe<ID_Input>;
  _id_starts_with?: Maybe<ID_Input>;
  _id_not_starts_with?: Maybe<ID_Input>;
  _id_ends_with?: Maybe<ID_Input>;
  _id_not_ends_with?: Maybe<ID_Input>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  dateSent?: Maybe<DateTimeInput>;
  dateSent_not?: Maybe<DateTimeInput>;
  dateSent_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateSent_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateSent_lt?: Maybe<DateTimeInput>;
  dateSent_lte?: Maybe<DateTimeInput>;
  dateSent_gt?: Maybe<DateTimeInput>;
  dateSent_gte?: Maybe<DateTimeInput>;
  lastResponded?: Maybe<DateTimeInput>;
  lastResponded_not?: Maybe<DateTimeInput>;
  lastResponded_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastResponded_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastResponded_lt?: Maybe<DateTimeInput>;
  lastResponded_lte?: Maybe<DateTimeInput>;
  lastResponded_gt?: Maybe<DateTimeInput>;
  lastResponded_gte?: Maybe<DateTimeInput>;
  no?: Maybe<Int>;
  no_not?: Maybe<Int>;
  no_in?: Maybe<Int[] | Int>;
  no_not_in?: Maybe<Int[] | Int>;
  no_lt?: Maybe<Int>;
  no_lte?: Maybe<Int>;
  no_gt?: Maybe<Int>;
  no_gte?: Maybe<Int>;
  recipients_some?: Maybe<SurveyRecipientWhereInput>;
  recipients_every?: Maybe<SurveyRecipientRestrictedWhereInput>;
  recipients_none?: Maybe<SurveyRecipientRestrictedWhereInput>;
  subject?: Maybe<String>;
  subject_not?: Maybe<String>;
  subject_in?: Maybe<String[] | String>;
  subject_not_in?: Maybe<String[] | String>;
  subject_lt?: Maybe<String>;
  subject_lte?: Maybe<String>;
  subject_gt?: Maybe<String>;
  subject_gte?: Maybe<String>;
  subject_contains?: Maybe<String>;
  subject_not_contains?: Maybe<String>;
  subject_starts_with?: Maybe<String>;
  subject_not_starts_with?: Maybe<String>;
  subject_ends_with?: Maybe<String>;
  subject_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  v?: Maybe<Int>;
  v_not?: Maybe<Int>;
  v_in?: Maybe<Int[] | Int>;
  v_not_in?: Maybe<Int[] | Int>;
  v_lt?: Maybe<Int>;
  v_lte?: Maybe<Int>;
  v_gt?: Maybe<Int>;
  v_gte?: Maybe<Int>;
  yes?: Maybe<Int>;
  yes_not?: Maybe<Int>;
  yes_in?: Maybe<Int[] | Int>;
  yes_not_in?: Maybe<Int[] | Int>;
  yes_lt?: Maybe<Int>;
  yes_lte?: Maybe<Int>;
  yes_gt?: Maybe<Int>;
  yes_gte?: Maybe<Int>;
  AND?: Maybe<SurveyWhereInput[] | SurveyWhereInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateManyMutationInput {
  credits?: Maybe<Int>;
  googleID?: Maybe<String>;
  v?: Maybe<Int>;
}

export interface SurveyRecipientUpdateWithWhereUniqueNestedInput {
  where: SurveyRecipientWhereUniqueInput;
  data: SurveyRecipientUpdateDataInput;
}

export interface SurveyRecipientUpdateManyInput {
  create?: Maybe<SurveyRecipientCreateInput[] | SurveyRecipientCreateInput>;
  update?: Maybe<
    | SurveyRecipientUpdateWithWhereUniqueNestedInput[]
    | SurveyRecipientUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | SurveyRecipientUpsertWithWhereUniqueNestedInput[]
    | SurveyRecipientUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    SurveyRecipientWhereUniqueInput[] | SurveyRecipientWhereUniqueInput
  >;
  deleteMany?: Maybe<
    SurveyRecipientScalarWhereInput[] | SurveyRecipientScalarWhereInput
  >;
  updateMany?: Maybe<
    | SurveyRecipientUpdateManyWithWhereNestedInput[]
    | SurveyRecipientUpdateManyWithWhereNestedInput
  >;
}

export interface SurveyRecipientUpdateDataInput {
  email?: Maybe<String>;
  responded?: Maybe<Boolean>;
}

export interface UserCreateInput {
  _id?: Maybe<ID_Input>;
  credits?: Maybe<Int>;
  googleID?: Maybe<String>;
  v?: Maybe<Int>;
}

export interface SurveyUpdateManyMutationInput {
  body?: Maybe<String>;
  dateSent?: Maybe<DateTimeInput>;
  lastResponded?: Maybe<DateTimeInput>;
  no?: Maybe<Int>;
  subject?: Maybe<String>;
  title?: Maybe<String>;
  v?: Maybe<Int>;
  yes?: Maybe<Int>;
}

export interface SurveyRecipientRestrictedWhereInput {
  _id?: Maybe<ID_Input>;
  _id_not?: Maybe<ID_Input>;
  _id_in?: Maybe<ID_Input[] | ID_Input>;
  _id_not_in?: Maybe<ID_Input[] | ID_Input>;
  _id_lt?: Maybe<ID_Input>;
  _id_lte?: Maybe<ID_Input>;
  _id_gt?: Maybe<ID_Input>;
  _id_gte?: Maybe<ID_Input>;
  _id_contains?: Maybe<ID_Input>;
  _id_not_contains?: Maybe<ID_Input>;
  _id_starts_with?: Maybe<ID_Input>;
  _id_not_starts_with?: Maybe<ID_Input>;
  _id_ends_with?: Maybe<ID_Input>;
  _id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  responded?: Maybe<Boolean>;
  responded_not?: Maybe<Boolean>;
  AND?: Maybe<
    SurveyRecipientRestrictedWhereInput[] | SurveyRecipientRestrictedWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserUpdateDataInput {
  credits?: Maybe<Int>;
  googleID?: Maybe<String>;
  v?: Maybe<Int>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  _id: ID_Output;
  credits?: Int;
  googleID?: String;
  v?: Int;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  _id: () => Promise<ID_Output>;
  credits: () => Promise<Int>;
  googleID: () => Promise<String>;
  v: () => Promise<Int>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  credits: () => Promise<AsyncIterator<Int>>;
  googleID: () => Promise<AsyncIterator<String>>;
  v: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface Survey {
  _id: ID_Output;
  body?: String;
  dateSent?: DateTimeOutput;
  lastResponded?: DateTimeOutput;
  no?: Int;
  recipients?: <T = FragmentableArray<SurveyRecipient>>() => T;
  subject?: String;
  title?: String;
  v?: Int;
  yes?: Int;
}

export interface SurveyPromise extends Promise<Survey>, Fragmentable {
  _id: () => Promise<ID_Output>;
  body: () => Promise<String>;
  dateSent: () => Promise<DateTimeOutput>;
  lastResponded: () => Promise<DateTimeOutput>;
  no: () => Promise<Int>;
  recipients: <T = FragmentableArray<SurveyRecipient>>() => T;
  subject: () => Promise<String>;
  title: () => Promise<String>;
  user: <T = UserPromise>() => T;
  v: () => Promise<Int>;
  yes: () => Promise<Int>;
}

export interface SurveySubscription
  extends Promise<AsyncIterator<Survey>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  body: () => Promise<AsyncIterator<String>>;
  dateSent: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastResponded: () => Promise<AsyncIterator<DateTimeOutput>>;
  no: () => Promise<AsyncIterator<Int>>;
  recipients: <T = Promise<AsyncIterator<SurveyRecipientSubscription>>>() => T;
  subject: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  v: () => Promise<AsyncIterator<Int>>;
  yes: () => Promise<AsyncIterator<Int>>;
}

export interface SurveyNullablePromise
  extends Promise<Survey | null>,
    Fragmentable {
  _id: () => Promise<ID_Output>;
  body: () => Promise<String>;
  dateSent: () => Promise<DateTimeOutput>;
  lastResponded: () => Promise<DateTimeOutput>;
  no: () => Promise<Int>;
  recipients: <T = FragmentableArray<SurveyRecipient>>() => T;
  subject: () => Promise<String>;
  title: () => Promise<String>;
  user: <T = UserPromise>() => T;
  v: () => Promise<Int>;
  yes: () => Promise<Int>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface SurveyRecipient {
  _id: ID_Output;
  email?: String;
  responded?: Boolean;
}

export interface SurveyRecipientPromise
  extends Promise<SurveyRecipient>,
    Fragmentable {
  _id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  responded: () => Promise<Boolean>;
}

export interface SurveyRecipientSubscription
  extends Promise<AsyncIterator<SurveyRecipient>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  responded: () => Promise<AsyncIterator<Boolean>>;
}

export interface SurveyRecipientNullablePromise
  extends Promise<SurveyRecipient | null>,
    Fragmentable {
  _id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  responded: () => Promise<Boolean>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  _id: ID_Output;
  credits?: Int;
  googleID?: String;
  v?: Int;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  _id: () => Promise<ID_Output>;
  credits: () => Promise<Int>;
  googleID: () => Promise<String>;
  v: () => Promise<Int>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  credits: () => Promise<AsyncIterator<Int>>;
  googleID: () => Promise<AsyncIterator<String>>;
  v: () => Promise<AsyncIterator<Int>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  _id: () => Promise<ID_Output>;
  credits: () => Promise<Int>;
  googleID: () => Promise<String>;
  v: () => Promise<Int>;
}

export interface SurveySubscriptionPayload {
  mutation: MutationType;
  node: Survey;
  updatedFields: String[];
  previousValues: SurveyPreviousValues;
}

export interface SurveySubscriptionPayloadPromise
  extends Promise<SurveySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SurveyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SurveyPreviousValuesPromise>() => T;
}

export interface SurveySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SurveySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SurveySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SurveyPreviousValuesSubscription>() => T;
}

export interface SurveyConnection {
  pageInfo: PageInfo;
  edges: SurveyEdge[];
}

export interface SurveyConnectionPromise
  extends Promise<SurveyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SurveyEdge>>() => T;
  aggregate: <T = AggregateSurveyPromise>() => T;
}

export interface SurveyConnectionSubscription
  extends Promise<AsyncIterator<SurveyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SurveyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSurveySubscription>() => T;
}

export interface SurveyPreviousValues {
  _id: ID_Output;
  body?: String;
  dateSent?: DateTimeOutput;
  lastResponded?: DateTimeOutput;
  no?: Int;
  subject?: String;
  title?: String;
  v?: Int;
  yes?: Int;
}

export interface SurveyPreviousValuesPromise
  extends Promise<SurveyPreviousValues>,
    Fragmentable {
  _id: () => Promise<ID_Output>;
  body: () => Promise<String>;
  dateSent: () => Promise<DateTimeOutput>;
  lastResponded: () => Promise<DateTimeOutput>;
  no: () => Promise<Int>;
  subject: () => Promise<String>;
  title: () => Promise<String>;
  v: () => Promise<Int>;
  yes: () => Promise<Int>;
}

export interface SurveyPreviousValuesSubscription
  extends Promise<AsyncIterator<SurveyPreviousValues>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  body: () => Promise<AsyncIterator<String>>;
  dateSent: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastResponded: () => Promise<AsyncIterator<DateTimeOutput>>;
  no: () => Promise<AsyncIterator<Int>>;
  subject: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  v: () => Promise<AsyncIterator<Int>>;
  yes: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SurveyEdge {
  node: Survey;
  cursor: String;
}

export interface SurveyEdgePromise extends Promise<SurveyEdge>, Fragmentable {
  node: <T = SurveyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SurveyEdgeSubscription
  extends Promise<AsyncIterator<SurveyEdge>>,
    Fragmentable {
  node: <T = SurveySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSurvey {
  count: Int;
}

export interface AggregateSurveyPromise
  extends Promise<AggregateSurvey>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSurveySubscription
  extends Promise<AsyncIterator<AggregateSurvey>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Survey",
    embedded: false
  },
  {
    name: "SurveyRecipient",
    embedded: true
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
